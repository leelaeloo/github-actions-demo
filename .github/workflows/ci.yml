name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  BUILD_ID: ${{ github.run_number }}
  DOCKER_REPO: leelaeloo/stswebjpa
  STAGING_HOST: 61.109.236.183

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Test application startup
      run: |
        npm start &
        sleep 5
        curl http://localhost:3000/health
        pkill -f "node src/app.js"

  build-java:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Build with Maven
        run: |
          chmod u+x mvnw
          ./mvnw clean package -Dmaven.test.skip=true
          
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build & Push Docker Image
        run: |
          TODAY=$(date +%Y%m%d)
          DOCKER_TAG=${TODAY}_${BUILD_ID}
          IMAGE=${DOCKER_REPO}:${DOCKER_TAG}
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build --build-arg VERSION=$DOCKER_TAG -t $IMAGE -f Dockerfile .
          docker push $IMAGE

  build-node:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create build info
      run: |
        mkdir -p build
        echo "Build completed at $(date)" > build/build-info.txt
        echo "Git commit: ${{ github.sha }}" >> build/build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> build/build-info.txt
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ github.run_number }}
        path: |
          build/
          src/
          package.json
        retention-days: 30

  deploy-java:
    needs: build-java
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Staging via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.STAGING_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker container rm -f stswebjpa || true
            docker container run -d \
              -p 80:8080 \
              -v /home/ubuntu/upload:/app/upload \
              --name=stswebjpa \
              ${{ env.IMAGE }}

  deploy-node:
    needs: build-node
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ github.run_number }}
        path: build
        
    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "build/*"
        target: "/home/ubuntu/app/"
        
    - name: Restart app
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/app/build
          npm install
          pm2 start node --name "myapp" -- src/app.js
